let _status=null,_settings={minimum:20,maximum:95,speed:.5,increaseSpeed:30,height:3,defaultColor:"#9400D3",color:["#9400D3"]},_progressBarElement=null;const _clamp=function(a,b,c){return a<b?b:a>c?c:a},_isStarted=function(){return null!==_status},_isRendered=function(){return null!==_progressBarElement},_getBarCss=function(a,b,c){return{transitionDuration:`0s, ${b}s`,transitionTimingFunction:`linear, ${c}`,width:`${a}%`}},_applyCss=function(a,b){for(const c in b){const d=b[c];d!==void 0&&(a.style[c]=d)}},_fadeOut=function(a){const b=a.style;b.transitionDuration=`${_settings.speed}s, 0s`,b.opacity="0",setTimeout(()=>{b.width="0%"},1e3*_settings.speed)};export default class Progress{constructor(){throw new Error("Can not instantiate. Please use the static functions.")}static initialize(){if(!_isRendered()){_progressBarElement=document.createElement("div");const a=_progressBarElement.style;switch(a.height=`${_settings.height}px`,a.width="0%",a.position="fixed",a.zIndex="99999",a.top="0",a.left="0",a.boxShadow="0 0 2px #29d, 0 0 1px #29d",a.background="transparent",a.transitionProperty="opacity, width",a.transitionTimingFunction="linear",a.transitionDuration=`0s, 0s`,_settings.color.length){case 0:a.background=_settings.defaultColor;break;case 1:a.background=_settings.color[0];break;default:a.background=`linear-gradient(to right,${_settings.color.join()})`;}document.body.appendChild(_progressBarElement)}}static configure(a){let b,c;for(b in a)c=a[b],void 0!==c&&_settings.hasOwnProperty(b)&&(_settings[b]=c)}static start(a){_isStarted()||(_progressBarElement.style.opacity="1",_status=0,"undefined"==typeof a&&(a=_settings.minimum),this.go(a))}static go(a){if(_isStarted()){_status=a=_clamp(a,1,_settings.maximum),_isRendered()||this.initialize();const b=_getBarCss(a,_settings.speed,"linear");_applyCss(_progressBarElement,b),setTimeout(()=>{const a=_getBarCss(_settings.maximum,_settings.increaseSpeed,"cubic-bezier(0,0,0,1)");_applyCss(_progressBarElement,a)},1e3*+_settings.speed)}}static complete(){_isStarted()&&setTimeout(()=>{const a=_getBarCss(100,_settings.speed,"linear");_applyCss(_progressBarElement,a),setTimeout(()=>{_fadeOut(_progressBarElement),_status=null},1e3*+_settings.speed)},1e3*+_settings.speed)}static increment(a){if(!_isStarted())return;let b=_status;if("undefined"==typeof b)return this.start(0);100<b||("undefined"==typeof a&&(0<=b&&20>b?a=10:20<=b&&50>b?a=4:50<=b&&80>b?a=2:80<=b&&99>b?a=1:a=0),b=_clamp(b+a,1,_settings.maximum),this.go(b))}}