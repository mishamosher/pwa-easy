const _fetchOriginal=fetch,_defaultHeaders={},_fetchHijacked=async(a,b)=>{let c;if(b||(b={}),b.hasOwnProperty("signal"))throw new Error("FetchInterceptor can't receive an abort signal. Please provide the AbortController instance as the 'controller' property instead.");b.hasOwnProperty("controller")?(c=b.controller,delete b.controller):c=new AbortController,b.signal=c.signal;const d=new Request(a,b);for(const[c,e]of Object.entries(_defaultHeaders))d.headers.set(c,e);for(const e of _interceptors.onBeforeRequest)e(d,c);const e=_fetchOriginal(d);for(const e of _interceptors.onAfterRequest)e(d,c);let f,g,h;try{if(f=await e,f.ok)for(const a of _interceptors.onRequestSuccess)a(f,d,c);else for(const a of _interceptors.onRequestFailure)a(f,d,c)}catch(a){for(const b of _interceptors.onRequestException)b(a,d,c);g=!0,h=a}finally{for(const a of _interceptors.onRequestFinally)a(d,c)}if(g)throw h;return f};let _interceptors={onBeforeRequest:[],onAfterRequest:[],onRequestSuccess:[],onRequestFailure:[],onRequestException:[],onRequestFinally:[]},_registered=!1;export default class FetchInterceptor{constructor(){throw new Error("Can not instantiate. Please use the static members.")}static get defaultHeaders(){return _defaultHeaders}static set defaultHeaders(a){for(const b of Object.keys(_defaultHeaders))delete _defaultHeaders[b];for(const[b,c]of Object.entries(a))_defaultHeaders[b]=c}static getDefaultHeader(a){return _defaultHeaders[a]}static setDefaultHeader(a,b){_defaultHeaders[a]=b}static addOnBeforeRequest(a){_interceptors.onBeforeRequest.push(a)}static addOnAfterRequest(a){_interceptors.onAfterRequest.push(a)}static addOnRequestSuccess(a){_interceptors.onRequestSuccess.push(a)}static addOnRequestFailure(a){_interceptors.onRequestFailure.push(a)}static addOnRequestException(a){_interceptors.onRequestException.push(a)}static addOnRequestFinally(a){_interceptors.onRequestFinally.push(a)}static clearInterceptors(){for(const a in _interceptors)_interceptors[a].length=0}static register(){if(_registered)throw new Error("Already registered!");_registered=!0,globalThis.fetch=_fetchHijacked}static unregister(){if(!_registered)throw new Error("Not registered!");_registered=!1,globalThis.fetch=_fetchOriginal}}